[{"/Users/justinli/Documents/git/maplehub/src/components/EventTile.js":"1","/Users/justinli/Documents/git/maplehub/src/pages/Home.js":"2","/Users/justinli/Documents/git/maplehub/src/common/Consts.js":"3","/Users/justinli/Documents/git/maplehub/src/components/common/Title.js":"4","/Users/justinli/Documents/git/maplehub/src/components/Nav.js":"5","/Users/justinli/Documents/git/maplehub/src/components/SearchBar.js":"6","/Users/justinli/Documents/git/maplehub/src/App.js":"7","/Users/justinli/Documents/git/maplehub/src/components/common/DefaultButton.js":"8","/Users/justinli/Documents/git/maplehub/src/common/Colors.js":"9","/Users/justinli/Documents/git/maplehub/src/index.js":"10","/Users/justinli/Documents/git/maplehub/src/reportWebVitals.js":"11","/Users/justinli/Documents/git/maplehub/src/pages/ServerStatus.js":"12","/Users/justinli/Documents/git/maplehub/src/components/ServerTile.js":"13","/Users/justinli/Documents/git/maplehub/src/serverUtils/ServerDetails.js":"14","/Users/justinli/Documents/git/maplehub/src/serverUtils/PingServer.js":"15"},{"size":13741,"mtime":1610589157768,"results":"16","hashOfConfig":"17"},{"size":15326,"mtime":1610589132977,"results":"18","hashOfConfig":"17"},{"size":739,"mtime":1610245460824,"results":"19","hashOfConfig":"17"},{"size":553,"mtime":1610315925816,"results":"20","hashOfConfig":"17"},{"size":3051,"mtime":1610589171260,"results":"21","hashOfConfig":"17"},{"size":2955,"mtime":1610315965919,"results":"22","hashOfConfig":"17"},{"size":89,"mtime":1609533328413,"results":"23","hashOfConfig":"17"},{"size":717,"mtime":1610507077041,"results":"24","hashOfConfig":"17"},{"size":132,"mtime":1610507615656,"results":"25","hashOfConfig":"17"},{"size":500,"mtime":1609178487389,"results":"26","hashOfConfig":"17"},{"size":362,"mtime":1609178487389,"results":"27","hashOfConfig":"17"},{"size":2061,"mtime":1610596788183,"results":"28","hashOfConfig":"17"},{"size":2514,"mtime":1610594813995,"results":"29","hashOfConfig":"17"},{"size":2115,"mtime":1610591502330,"results":"30","hashOfConfig":"17"},{"size":1430,"mtime":1610594686368,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"1pq1occ",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/justinli/Documents/git/maplehub/src/components/EventTile.js",["65"],"import React, { Component } from \"react\";\nimport styled, { keyframes, css } from \"styled-components\";\n\nimport { EventTypes, FilterTypes } from \"../common/Consts\";\nimport Colors from \"../common/Colors\";\n\nimport ArrowDownIcon from \"../icons/chevron-down-solid.svg\";\nimport ArrowUpIcon from \"../icons/chevron-up-solid.svg\";\n\nimport MultiEventIcon from \"../icons/tasks-solid.svg\";\nimport ActiveEventIcon from \"../icons/hourglass-start-solid.svg\";\nimport FutureEventIcon from \"../icons/fast-forward-solid.svg\";\nimport PastEventIcon from \"../icons/history-solid.svg\";\nimport PermanentEventIcon from \"../icons/infinity-solid.svg\";\n\nconst handleTruncateText = (text, isExpanded, length) => {\n  if (text.length <= length || isExpanded) {\n    return text;\n  }\n  const truncatedText = text.length > length ? text.substring(0, length) : text;\n  const lastSpaceIndex = truncatedText.lastIndexOf(\" \");\n  return (\n    truncatedText.substring(\n      0,\n      lastSpaceIndex === -1 ? length : lastSpaceIndex\n    ) + \"...\"\n  );\n};\n\n/**\n *\n * @param integer eventTimes\n * returns the first event cycle\n * either:\n * - first upcoming\n * - currently happening\n */\nconst findFirstActiveDate = (eventTimes) => {\n  const currentTime = Date.now();\n  return (\n    eventTimes.find(\n      (time) =>\n        time[0] > currentTime ||\n        (time[0] < currentTime && time[1] > currentTime)\n    ) ?? eventTimes[eventTimes.length - 1]\n  );\n};\n\nconst handleEventProps = (details) => {\n  const { eventType, eventTimes } = details;\n  const currentTime = Date.now();\n  let startDate,\n    eventIcon,\n    isEventActive,\n    eventDuration,\n    timeToConvert,\n    firstActiveTime;\n  switch (eventType) {\n    case EventTypes.PATCH:\n      // no times\n      eventIcon = PermanentEventIcon;\n      startDate = \"Now\";\n      isEventActive = true;\n      eventDuration = Infinity;\n      break;\n    case EventTypes.UPDATE:\n      // 1 time\n      timeToConvert = new Date(eventTimes[0]);\n      eventIcon = PermanentEventIcon;\n      startDate =\n        timeToConvert.toLocaleDateString() +\n        \" at \" +\n        timeToConvert.toLocaleTimeString();\n      isEventActive = true;\n      eventDuration = Infinity;\n      break;\n    case EventTypes.SINGLE_EVENT:\n      // duration\n      timeToConvert = new Date(eventTimes[0]);\n      startDate =\n        timeToConvert.toLocaleDateString() +\n        \" at \" +\n        timeToConvert.toLocaleTimeString();\n      isEventActive =\n        eventTimes[0] <= currentTime && eventTimes[1] >= currentTime;\n      eventDuration = findRemainingDuration(eventTimes);\n      if (eventTimes[0] <= currentTime && eventTimes[1] >= currentTime) {\n        eventIcon = ActiveEventIcon;\n      }\n      if (eventTimes[0] > currentTime) {\n        eventIcon = FutureEventIcon;\n      }\n      if (eventTimes[1] < currentTime) {\n        eventIcon = PastEventIcon;\n      }\n      break;\n    case EventTypes.MULTIPLE_EVENTS:\n      const totalActiveTime = [\n        eventTimes[0][0],\n        eventTimes[eventTimes.length - 1][1],\n      ];\n      firstActiveTime = findFirstActiveDate(eventTimes);\n      eventDuration = findRemainingDuration(totalActiveTime);\n      timeToConvert = new Date(findFirstActiveDate(eventTimes)[0]);\n      startDate =\n        timeToConvert.toLocaleDateString() +\n        \" at \" +\n        timeToConvert.toLocaleTimeString();\n      eventIcon = eventTimes ? MultiEventIcon : PastEventIcon;\n      if (\n        totalActiveTime[0] <= currentTime &&\n        totalActiveTime[1] >= currentTime\n      ) {\n        isEventActive = true;\n      } else {\n        isEventActive = false;\n      }\n      break;\n    default:\n      break;\n  }\n  return {\n    startDate,\n    isEventActive,\n    eventIcon,\n    eventDuration,\n    // TODO: show in details when expanded as \"next event period\"\n    firstActiveTime,\n  };\n};\n\nconst findRemainingDuration = (eventTimes) => {\n  if (!eventTimes) {\n    return -1;\n  }\n  const currentTime = Date.now();\n  let timeToConvert = -1;\n  if (eventTimes[0] > currentTime) {\n    timeToConvert = eventTimes[1] - eventTimes[0];\n  } else {\n    timeToConvert = eventTimes[1] - currentTime;\n    if (timeToConvert < 0) {\n      return -1;\n    }\n  }\n  const diffDays = Math.ceil(timeToConvert / (1000 * 60 * 60 * 24));\n  return diffDays;\n};\n\nexport default class EventTile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      eventDetails: this.props.eventDetails,\n      isDetailsExpanded: false,\n      isEventActive: true,\n      eventDuration: 0,\n      eventIcon: null,\n      startDate: \"\",\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      ...this.state,\n      ...handleEventProps(this.state.eventDetails),\n    });\n  }\n\n  handleDetailsToggle() {\n    this.setState({\n      ...this.state,\n      isDetailsExpanded: !this.state.isDetailsExpanded,\n    });\n  }\n\n  handleRenderDuration() {\n    const { eventDuration } = this.state;\n    switch (eventDuration) {\n      case -1:\n        return \"Event Ended\";\n      case Infinity:\n        return \"Permanent\";\n      default:\n        return eventDuration > 1\n          ? `${eventDuration} days`\n          : `${eventDuration} day`;\n    }\n  }\n\n  handleRenderStartPeriodHeader() {\n    const { eventDetails } = this.state;\n    if (eventDetails.eventType === EventTypes.MULTIPLE_EVENTS) {\n      return \"Next Period Starting:\";\n    }\n    return \"Available Starting:\";\n  }\n\n  handleFilteredState() {\n    const { eventDetails } = this.state;\n    const { isFilterActive, filters, filterValue } = this.props;\n    const filterKeys = Object.keys(filters);\n    let shouldTileBeDisplayed = false;\n\n    if (!isFilterActive && !filterValue) {\n      return true;\n    }\n\n    // search bar takes precedence - ignore filter pills if event name is entered\n    if (filterValue) {\n      if (eventDetails.eventName === filterValue) {\n        return true;\n      }\n      return false;\n    }\n\n    // check for type of event and event times\n    filterKeys.forEach((key) => {\n      const filterState = filters[key];\n      if (!filterState) {\n        return;\n      }\n\n      if (key === FilterTypes.UPDATES_PATCHES) {\n        if (\n          eventDetails.eventType === EventTypes.PATCH ||\n          eventDetails.eventType === EventTypes.UPDATE\n        ) {\n          shouldTileBeDisplayed = true;\n          return;\n        }\n      } else if (key === FilterTypes.MULTIPLE_EVENTS) {\n        if (eventDetails.eventType === EventTypes.MULTIPLE_EVENTS) {\n          shouldTileBeDisplayed = true;\n          return;\n        }\n      } else if (key === FilterTypes.ACTIVE_EVENTS) {\n        if (\n          this.state.isEventActive &&\n          this.state.eventDetails.eventType === EventTypes.SINGLE_EVENT\n        ) {\n          shouldTileBeDisplayed = true;\n          return;\n        }\n      } else if (key === FilterTypes.PAST_EVENTS) {\n        if (!this.state.isEventActive && this.state.eventDuration < 0) {\n          shouldTileBeDisplayed = true;\n          return;\n        }\n      } else if (key === FilterTypes.FUTURE_EVENTS) {\n        if (\n          !this.state.isEventActive &&\n          this.state.eventDetails.eventTimes &&\n          this.state.eventDetails.eventTimes[0] > Date.now()\n        ) {\n          shouldTileBeDisplayed = true;\n          return;\n        }\n      }\n    });\n\n    return shouldTileBeDisplayed;\n  }\n\n  render() {\n    const {\n      isDetailsExpanded,\n      eventDetails,\n      isEventActive,\n      eventIcon,\n      startDate,\n    } = this.state;\n    return (\n      <>\n        <OverlayContainer\n          onClick={this.handleDetailsToggle.bind(this)}\n          isDetailsExpanded={isDetailsExpanded}\n        />\n        <Container\n          isDetailsExpanded={isDetailsExpanded}\n          isEventActive={isEventActive}\n          isFiltered={this.handleFilteredState()}\n        >\n          <EventHeader isDetailsExpanded={isDetailsExpanded}>\n            <EventIconContainer\n              isActiveTimedEvent={\n                isEventActive &&\n                eventDetails.eventType === EventTypes.SINGLE_EVENT\n              }\n              src={`${eventIcon}`}\n            />\n            {eventDetails.eventName}\n          </EventHeader>\n          <ContentContainer>\n            <EventDetails>\n              <Bold>{this.handleRenderStartPeriodHeader()}</Bold>\n              {startDate}\n            </EventDetails>\n            <br />\n            <EventDetails>\n              <Bold>Duration Remaining:</Bold>\n              {this.handleRenderDuration()}\n            </EventDetails>\n            <br />\n            <EventDetails>\n              <Bold>Requirements:</Bold>\n              {eventDetails.requirements.length\n                ? handleTruncateText(\n                    eventDetails.requirements,\n                    isDetailsExpanded,\n                    80\n                  )\n                : \"None\"}\n            </EventDetails>\n            {/* TODO: set Rewards */}\n            <DetailsContainer isDetailsExpanded={isDetailsExpanded}>\n              <DetailsHeader>Details: </DetailsHeader>\n              <Details\n                dangerouslySetInnerHTML={{ __html: eventDetails.details }}\n              />\n              <Rewards isRewardsActive={!!eventDetails.rewards.length}>\n                <DetailsHeader>Rewards: </DetailsHeader>\n                <RewardDetails\n                  dangerouslySetInnerHTML={{ __html: eventDetails.rewards }}\n                />\n                {eventDetails.rewardImages.map((imgSrc, i) => (\n                  <img key={i} src={imgSrc} />\n                ))}\n              </Rewards>\n            </DetailsContainer>\n          </ContentContainer>\n          <Footer onClick={this.handleDetailsToggle.bind(this)}>\n            <span>Show Details</span>\n            <div>\n              <ArrowDownIconContainer\n                isDetailsExpanded={isDetailsExpanded}\n                src={ArrowDownIcon}\n                alt=''\n              />\n              <ArrowUpIconContainer\n                isDetailsExpanded={isDetailsExpanded}\n                src={ArrowUpIcon}\n                alt=''\n              />\n            </div>\n          </Footer>\n        </Container>\n      </>\n    );\n  }\n}\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst Container = styled.div`\n  z-index: ${({ isDetailsExpanded }) => (isDetailsExpanded ? 100 : \"unset\")};\n  position: relative;\n  display: ${({ isFiltered }) => (isFiltered ? \"block\" : \"none\")};\n  flex: ${({ isDetailsExpanded }) =>\n    isDetailsExpanded ? \"0 0 calc(100% - 32px)\" : \"0 0 calc(50% - 32px)\"};\n  height: ${({ isDetailsExpanded }) => (isDetailsExpanded ? \"500px\" : \"250px\")};\n  margin: 16px;\n  padding: 16px;\n  border-radius: 5px;\n  background: ${({ isEventActive }) => (isEventActive ? \"#ffffff\" : \"#e6e6e6\")};\n  box-shadow: 4px 5px 3px rgba(0, 0, 0, 0.25);\n`;\n\nconst ContentContainer = styled.div`\n  margin-left: 8px;\n  line-height: 30px;\n`;\n\nconst EventHeader = styled.h2`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin-bottom: 16px;\n  font-weight: bold;\n  font-size: 24px;\n  width: ${({ isDetailsExpanded }) => (isDetailsExpanded ? \"900px\" : \"410px\")};\n`;\n\nconst EventDetails = styled.p`\n  display: inline-block;\n  margin-left: 4px;\n  line-height: 25px;\n`;\n\n// TODO: shrink footer when out of focus (clicking outside the box)\nconst Footer = styled.div`\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  align-items: center;\n  height: 45px;\n  width: 100%;\n  padding: 0 16px;\n  vertical-align: center;\n  border-top: 1px solid ${Colors.BackgroundGrey};\n\n  &:hover {\n    cursor: pointer;\n\n    img {\n      transform: scale(1.15);\n      filter: drop-shadow(2px 2px 1px ${Colors.BackgroundGrey});\n    }\n  }\n`;\n\nconst Bold = styled.b`\n  margin-right: 8px;\n`;\n\nconst ArrowIcon = styled.img`\n  width: 28px;\n  height: 28px;\n  padding: 3px;\n  border-radius: 50%;\n  transition: 0.1s linear all;\n`;\n\nconst ArrowUpIconContainer = styled(ArrowIcon)`\n  display: ${({ isDetailsExpanded }) => (isDetailsExpanded ? \"block\" : \"none\")};\n`;\n\nconst ArrowDownIconContainer = styled(ArrowIcon)`\n  display: ${({ isDetailsExpanded }) => (isDetailsExpanded ? \"none\" : \"block\")};\n`;\n\nconst EventIconContainer = styled.img`\n  margin: 0 8px 4px 0;\n  height: 20px;\n  width: 20px;\n  vertical-align: middle;\n  animation: ${({ isActiveTimedEvent }) =>\n    isActiveTimedEvent\n      ? css`\n          ${rotate} 4s linear infinite\n        `\n      : \"none\"};\n`;\n\n// TODO: Animation on show/hide?\nconst DetailsContainer = styled.div`\n  overflow-y: auto;\n  max-height: 280px;\n  width: ${({ isDetailsExpanded }) =>\n    isDetailsExpanded ? \"calc(100% - 32px)\" : 0};\n  height: ${({ isDetailsExpanded }) => (isDetailsExpanded ? \"auto\" : 0)};\n  padding: ${({ isDetailsExpanded }) => (isDetailsExpanded ? \"16px 8px\" : 0)};\n  opacity: ${({ isDetailsExpanded }) => (isDetailsExpanded ? 1 : 0)};\n  visibility: ${({ isDetailsExpanded }) =>\n    isDetailsExpanded ? \"visible\" : \"hidden\"};\n`;\n\nconst Details = styled.ul`\n  list-style-position: outside;\n  & > li {\n    font-size: 14px;\n    font-weight: bold;\n\n    & ul {\n      font-size: 12px;\n      font-weight: normal;\n      text-indent: 16px;\n    }\n  }\n\n  & img {\n    max-width: 600px;\n  }\n\n  & br {\n    display: none;\n  }\n\n  & em {\n    display: inline;\n  }\n\n  & > span {\n    padding-right: 4px;\n  }\n`;\n\nconst Rewards = styled.div`\n  display: ${({ isRewardsActive }) => (isRewardsActive ? \"block\" : \"none\")};\n`;\n\nconst DetailsHeader = styled.h2`\n  margin: 8px 4px;\n`;\n\nconst RewardDetails = styled.ul``;\n\nconst OverlayContainer = styled.div`\n  z-index: 10;\n  display: ${({ isDetailsExpanded }) => (isDetailsExpanded ? \"block\" : \"none\")};\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: transparent;\n`;\n","/Users/justinli/Documents/git/maplehub/src/pages/Home.js",[],"/Users/justinli/Documents/git/maplehub/src/common/Consts.js",[],"/Users/justinli/Documents/git/maplehub/src/components/common/Title.js",[],"/Users/justinli/Documents/git/maplehub/src/components/Nav.js",[],"/Users/justinli/Documents/git/maplehub/src/components/SearchBar.js",[],"/Users/justinli/Documents/git/maplehub/src/App.js",[],["66","67"],"/Users/justinli/Documents/git/maplehub/src/components/common/DefaultButton.js",[],"/Users/justinli/Documents/git/maplehub/src/common/Colors.js",[],"/Users/justinli/Documents/git/maplehub/src/index.js",[],["68","69"],"/Users/justinli/Documents/git/maplehub/src/reportWebVitals.js",[],"/Users/justinli/Documents/git/maplehub/src/pages/ServerStatus.js",[],"/Users/justinli/Documents/git/maplehub/src/components/ServerTile.js",["70"],"/Users/justinli/Documents/git/maplehub/src/serverUtils/ServerDetails.js",[],"/Users/justinli/Documents/git/maplehub/src/serverUtils/PingServer.js",[],{"ruleId":"71","severity":1,"message":"72","line":327,"column":19,"nodeType":"73","endLine":327,"endColumn":47},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"74","replacedBy":"78"},{"ruleId":"76","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":47,"column":7,"nodeType":"82","messageId":"83","endLine":47,"endColumn":26},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["84"],"no-negated-in-lhs",["85"],["84"],["85"],"no-unused-vars","'averageTenLatencies' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]